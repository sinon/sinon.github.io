<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Rob&#x27;s Blog | Python • Rust • Ramblings? - py03</title>
      <link>https://sinon.github.io</link>
      <description></description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://sinon.github.io/tags/py03/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Sat, 30 Aug 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>Bridging Python &amp; Rust: A Walkthrough of using Py03</title>
          <pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://sinon.github.io/bridging-python-and-rust/</link>
          <guid>https://sinon.github.io/bridging-python-and-rust/</guid>
          <description xml:base="https://sinon.github.io/bridging-python-and-rust/">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sinon.github.io&#x2F;bridging-python-and-rust&#x2F;#bridging-python-and-rust-a-practical-guide-with-pyo3&quot;&gt;Bridging Python and Rust: A Practical Guide with PyO3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sinon.github.io&#x2F;bridging-python-and-rust&#x2F;#project-structure&quot;&gt;Project Structure&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sinon.github.io&#x2F;bridging-python-and-rust&#x2F;#step-1-exposing-rust-functions-with-pyo3&quot;&gt;Step 1: Exposing Rust Functions with PyO3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sinon.github.io&#x2F;bridging-python-and-rust&#x2F;#step-2-building-and-packaging&quot;&gt;Step 2: Building and Packaging&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sinon.github.io&#x2F;bridging-python-and-rust&#x2F;#step-3-using-the-library-from-python&quot;&gt;Step 3: Using the Library from Python&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sinon.github.io&#x2F;bridging-python-and-rust&#x2F;#step-4-handling-errors&quot;&gt;Step 4: Handling Errors&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sinon.github.io&#x2F;bridging-python-and-rust&#x2F;#wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;bridging-python-and-rust-a-practical-guide-with-pyo3&quot;&gt;Bridging Python and Rust: A Practical Guide with PyO3&lt;&#x2F;h1&gt;
&lt;p&gt;Sometimes Python just isn&#x27;t fast enough, or you want to reuse some Rust code without rewriting it. &lt;a href=&quot;https:&#x2F;&#x2F;pyo3.rs&quot;&gt;PyO3&lt;&#x2F;a&gt; makes it surprisingly easy to call Rust from Python (or less commonly vice-versa). Here’s how I created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sinon&#x2F;pngme&#x2F;tree&#x2F;main&#x2F;crates&#x2F;pngme-python&quot;&gt;pngme-python&lt;&#x2F;a&gt; crate, to expose my already existing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sinon&#x2F;pngme&#x2F;tree&#x2F;main&#x2F;crates&#x2F;pngme&quot;&gt;pngme&lt;&#x2F;a&gt; Rust crate as a python library.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;project-structure&quot;&gt;Project Structure&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#191919;color:#ffffff;&quot;&gt;&lt;code&gt;&lt;span&gt;pngme&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── src&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   └── lib.rs
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;pngme-python&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;├── src&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   └── lib.rs
&lt;&#x2F;span&gt;&lt;span&gt;├── tests&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;│   └── test_pngme.py
&lt;&#x2F;span&gt;&lt;span&gt;├── Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── pyproject.toml
&lt;&#x2F;span&gt;&lt;span&gt;├── README.md
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pngme&#x2F;src&#x2F;lib.rs&lt;&#x2F;strong&gt;: The original Rust code with PNG manipulation functionality, that we want to expose as a Python library&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;pngme-python&#x2F;src&#x2F;lib.rs&lt;&#x2F;strong&gt;: The Py03 bindings.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;test_pngme.py&lt;&#x2F;strong&gt;: Python tests to verify the bindings work correctly&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;pngme-python&#x2F;src&#x2F;Cargo.toml&lt;&#x2F;strong&gt;: The build configuration for the Rust portion of the Py03&#x2F;Maturin build process.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;pyproject.toml&lt;&#x2F;strong&gt;: Python packaging configuration for Maturin&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;step-1-exposing-rust-functions-with-pyo3&quot;&gt;Step 1: Exposing Rust Functions with PyO3&lt;&#x2F;h2&gt;
&lt;p&gt;PyO3 lets you turn Rust functions into Python-callable methods with minimal fuss. Here’s a trimmed-down version of the &lt;code&gt;encode&lt;&#x2F;code&gt;, &lt;code&gt;decode&lt;&#x2F;code&gt;, and &lt;code&gt;remove&lt;&#x2F;code&gt; functions from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sinon&#x2F;pngme&#x2F;blob&#x2F;main&#x2F;crates&#x2F;pngme-python&#x2F;src&#x2F;lib.rs&quot;&gt;src&#x2F;lib.rs&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pyo3::prelude::&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;#[pymodule]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;#[pyo3(name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;pngme&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pngme_python {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pyo3::exceptions::{PyFileNotFoundError, PyIOError, PyValueError};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pyo3::{prelude::&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, PyResult};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;std::path::PathBuf;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pngme_lib::{decode &lt;&#x2F;span&gt;&lt;span&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; png_decode, encode &lt;&#x2F;span&gt;&lt;span&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; png_encode, remove &lt;&#x2F;span&gt;&lt;span&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; png_remove, Error};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    #[pyfunction]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;encode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;: PathBuf, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;chunk_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;: String) -&amp;gt; PyResult&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;png_encode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;path, &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;chunk_type, message);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; result {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(()),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; e {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::FileNotFound { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyFileNotFoundError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::Read { source: s } &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyIOError::new_err(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::PNGParse &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::InvalidChunkType { source: s, &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::PNGWrite { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::ChunkNotFound { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::StrConversion &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    #[pyfunction]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;: PathBuf, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;chunk_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;: String) -&amp;gt; PyResult&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;png_decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;path, &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;chunk_type);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; result {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(msg) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(msg),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; e {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::FileNotFound { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyFileNotFoundError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::Read { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyIOError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::PNGParse &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::InvalidChunkType { source: s, &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::PNGWrite { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::ChunkNotFound { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::StrConversion &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    #[pyfunction]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;: PathBuf, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#8aa6c1;&quot;&gt;chunk_type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;: String) -&amp;gt; PyResult&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; result &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;png_remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;path, &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;chunk_type);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; result {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(()),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(e) &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt; e {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::FileNotFound { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyFileNotFoundError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::Read { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyIOError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::PNGParse &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::InvalidChunkType { source: s, &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::PNGWrite { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::ChunkNotFound { &lt;&#x2F;span&gt;&lt;span&gt;.. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;                Error::StrConversion &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(PyValueError::new_err(e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;())),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;            },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The key parts of this implementation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;#[pymodule]&lt;&#x2F;code&gt; macro creates a Python module from the Rust module it encloses.&lt;&#x2F;li&gt;
&lt;li&gt;Each &lt;code&gt;#[pyfunction]&lt;&#x2F;code&gt; within the Rust module adds a Rust function to Python the &lt;code&gt;#[pymodule]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Each Rust error type must be handled and mapped to the appropriate Python exceptions.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;step-2-building-and-packaging&quot;&gt;Step 2: Building and Packaging&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PyO3&#x2F;maturin&quot;&gt;Maturin&lt;&#x2F;a&gt; handles compiling the Rust code and packaging it as a Python wheel. Two configuration files control this process:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Cargo.toml&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;pngme-python&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;2021&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;[lib]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;pngme&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;crate-type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;cdylib&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;pyo3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;0.18.3&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;extension-module&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;pngme-lib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;..&#x2F;pngme&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;pyproject.toml&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;[build-system]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;requires &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;maturin&amp;gt;=1.0,&amp;lt;2.0&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;build-backend &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;maturin&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;[project]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;pngme&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;0.1.0&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;description &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;Python bindings for pngme&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;readme &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;README.md&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;[tool.maturin]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;= [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;pyo3&#x2F;extension-module&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Building is as simple as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;maturin develop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This creates a Python wheel that you can use directly or publish to PyPI.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;step-3-using-the-library-from-python&quot;&gt;Step 3: Using the Library from Python&lt;&#x2F;h2&gt;
&lt;p&gt;Once built, and installed, just import and use the module in Python. An example can be found in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sinon&#x2F;pngme&#x2F;blob&#x2F;main&#x2F;crates&#x2F;pngme-python&#x2F;tests&#x2F;test_pngme.py&quot;&gt;tests&#x2F;test_pngme.py&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pngme
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;def test_pngme_encode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;():
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    file_location &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;.&#x2F;crates&#x2F;pngme-python&#x2F;tests&#x2F;dice.png&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    pngme.encode(file_location, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;ruSt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;some message&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    output &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pngme.decode(file_location, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;ruSt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;output &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;some message&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    pngme.remove(file_location, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;ruSt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    nothing &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pngme.decode(file_location, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;ruSt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;nothing &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;No secret message found&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;step-4-handling-errors&quot;&gt;Step 4: Handling Errors&lt;&#x2F;h2&gt;
&lt;p&gt;PyO3 lets you map Rust errors to Python exceptions, so Python users get idiomatic error messages as shown below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#191919;color:#ffffff;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pytest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span&gt;def test_pngme_unknown_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;():
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;pytest.raises(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;FileNotFoundError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;exc:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;        pngme.encode(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;unknown.png&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;ruSt&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;quot;some message&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#80d500;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffd700;&quot;&gt;&amp;#39;File not found &amp;quot;unknown.png&amp;quot;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8aa6c1;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cccccc;&quot;&gt;(exc.value)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;&#x2F;h2&gt;
&lt;p&gt;PyO3 makes it easy to bring Rust’s speed and safety to Python, with natural error handling and a smooth workflow. If you want to squeeze more performance out of Python or reuse Rust code, give it a try.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;References:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pyo3.rs&quot;&gt;PyO3 Documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;maturin.rs&quot;&gt;Maturin Documentation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sinon&#x2F;pngme&#x2F;tree&#x2F;main&#x2F;crates&#x2F;pngme-python&quot;&gt;pngme-python Source Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
    </channel>
</rss>
